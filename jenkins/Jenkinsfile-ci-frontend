pipeline {
    
    environment {
        registry = "eranzaksh/project" 
        registryCredential = 'docker-hub' 
        containerId = ''
        GIT_COMMIT = ''
    }


    agent {
        docker {
            label 'eee'
            image "eranzaksh/jenkins-agent:python"
            args '-u 0:0 -v /var/run/docker.sock:/var/run/docker.sock'
            alwaysPull true
        }
    }

    stages {
        stage("Clone Git Repository") {
            steps {
                checkout scm
            }
        }
        stage("Frontend Verify") {
            parallel {
                
                stage("Frontend Linting") {
                    steps {
                        sh '/venv/bin/pylint --disable=E0401 --output-format=parseable --fail-under=5 app/app.py'
                    }
                }
                
                stage("Frontend Dependencies scan") {
                    steps {
                        sh '/venv/bin/bandit -r app/. --severity-level high'
                    }
                }
                
            }
        }

        stage("Build Frontend") {
            steps {
                script {
                    GIT_COMMIT = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)
                    sh 'docker build -f app/dockerfile -t ${registry}:${GIT_COMMIT} -t ${registry}:latest ./app'
                }
            }
        }

       stage("Test Frontend") {
           steps {
               script{
                    // Getting the container ID (To delete after testing)
                    def containerId = sh(script: "docker run -d -p 5000:5000 ${registry}:latest", returnStdout: true).trim()
                    
                    // Wait for the container to start
                    sh 'sleep 3'

                    // Fetch the private IP of the EC2 instance so i can test the container with curl
                    def privateIP = sh(
                        script: "curl -s http://169.254.169.254/latest/meta-data/local-ipv4",
                        returnStdout: true
                    ).trim()

                    def status_code = sh(script: "curl -o /dev/null -s -w \"%{http_code}\" http://${privateIP}:5000", returnStdout: true).trim()
                    // Check the status code and stop the pipeline if it's not 200
                    if (status_code != '200') {
                        error "Frontend connectivity test failed, expected 200 but got ${status_code}"
                    } else {
                        echo "Frontend connectivity test passed with status code 200"
                    }
                    sh "docker stop ${containerId} && docker rm ${containerId}"
                    
               }
           }
       }
        stage('Push Frontend') { 
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                        sh "docker push ${registry}:$GIT_COMMIT"
                        sh "docker push ${registry}:latest"
                  }
                }
            }
        }
        stage('Trigger project-cd Job') {
            steps {
                script {
                    // Trigger the second job and pass the parameters
                    build job: 'project-cd', 
                        parameters: [
                            string(name: 'GIT_COMMIT', value: "${GIT_COMMIT}"), 
                        ]
                }
            }
        }

    }     
    post {
        always {
            // delete the image so it won't take space in case the agent is up for long time or a failed test
             sh "docker rmi  ${registry}:${GIT_COMMIT}"
            // cleaning the WD
            cleanWs() 
         }
        success {
          slackSend channel: 'succeeded-build', color: 'good', message: "Frontend build successful: Job '${env.JOB_NAME}-${env.BUILD_NUMBER} ${STAGE_NAME} ${GIT_COMMIT}'"
        }
    
        failure {
          slackSend channel: 'devops-alerts', color: 'danger', message: "Frontend build failed: Job '${env.JOB_NAME}-${env.BUILD_NUMBER} ${STAGE_NAME} ${GIT_COMMIT}'"
        }

}
    
}
